@page "/RHabitacion"
@page "/RHabitacion/{Id:int}"

@using Models
@using System.IO
@using System.Net.Http

@inject HttpClient Http
@inject IToastService toast

<EditForm Model="habitacion">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registro de Habitaciones</h3>
        </div>
        <div class="card-body">
            <form>

                @*HabitaciónId*@
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <label>Habitación Id</label>                                                                                     
                            <div class="input-group">
                                <InputNumber @bind-Value="habitacion.HabitacionId" class="form-control col-4" />                 
                                <div class="input-group-append">
                                    <a href="@("CHabitacion")" class="btn btn-primary">Buscar</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Numero Habitación*@
                <div class="form-group">
                    <label>Numero de habitación</label>
                    <InputText @bind-Value="habitacion.NumeroHabitacion" class="form-control" />
                </div>

                @*Tipo*@
                <div class="form-group">
                    <label>Tipo</label>
                    <select class="form-control" @bind="habitacion.Tipo">
                        <option value="Individual">Individual</option>
                        <option value="Doble">Doble</option>
                        <option value="Suite Máster">Suite Máster</option>
                        <option value="Suite Junior">Suite Junior</option>
                    </select>
                </div>

                @*Características*@
                <div class="card">
                    <h5 class="card-header">Características</h5>
                    <div class="card-body">
                        <div class="form-group">
                            @for (int i = 0; i < 5; i++)
                            {
                                int index = i;

                                <div class="form-group form-inline">
                                    <label>@Caracteristicas[index]</label>
                                    <input type="checkbox" @bind="Elecciones[index]" class="form-check-input col-1" />
                                </div>
                            }
                        </div>
                    </div>
                </div>

                @*Precio*@
                <div class="form-group">
                    <label>Precio</label>
                    <InputNumber @bind-Value="habitacion.Precio" class="form-control" />
                </div>

                @*Estado*@
                <div class="form-row align-items-center">
                    <div class="col">
                        <div class="form-group">
                            <div class="input-group">
                                <label>Estado</label>
                                <div class="input-group-append">
                                    <InputCheckbox @bind-Value="habitacion.Estado" class="form-check-input col-1" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                @*Foto*@
                <div class="form-group">
                    <label>Foto</label>
                    <InputFile OnChange="CargarFoto" />
                    @if (habitacion.Foto != null)
                    {
                        <img src="@habitacion.Foto" style="height:300px;width:300px" />
                    }
                </div>

            </form>
        </div>
        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="button" class="btn btn-lg btn-primary oi oi-file" @onclick="Nuevo"> Nuevo</button>
                <button type="submit" class="btn btn-lg btn-success oi oi-cloud-upload" @onclick="Guardar"> Guardar</button>
                <button type="button" class="btn btn-lg btn-danger oi oi-trash" @onclick="Eliminar"> Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private Habitacion habitacion = new Habitacion();

    public string Filtro { get; set; }

    [Parameter]
    public int Id { get; set; }


    bool[] Elecciones = new bool[5];
    string[] Caracteristicas = new string[5];


    protected override async Task OnInitializedAsync()
    {
        Caracteristicas[0] = "Una cama";
        Caracteristicas[1] = "Lavabo";
        Caracteristicas[2] = "Cama doble";
        Caracteristicas[3] = "Refrigerador";
        Caracteristicas[4] = "Amueblado";

        Nuevo();
        await BuscarParametro();
    }

    async Task CargarFoto(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            var ms = new MemoryStream();
            await file.Data.CopyToAsync(ms);

            if (file.Name.Contains("png") || file.Name.Contains("jpg"))
            {
                var reader = new StreamReader(file.Data);

                string imageBase64Data = Convert.ToBase64String(ms.ToArray());

                habitacion.Foto = string.Format("data:image/jpg;base64,{0}", imageBase64Data);
            }
        }
    }

    private async Task BuscarParametro()
    {

        if (Id > 0)
        {
            var respuesta = await Http.GetFromJsonAsync<Habitacion>($"http://localhost:5000/Api/Habitacion/{Id}");

            if(respuesta != null)
            {
                habitacion = respuesta;
                AsigarCheckBox();

            }
            else
                toast.ShowError("No encontrado");
        }

    }

    private void Nuevo()
    {
        habitacion = new Habitacion();
        Elecciones = new bool[5];
    }

    private async Task Guardar()
    {
        AsignarCaracteristicas();

        var guardado = await Http.PostAsJsonAsync("http://localhost:5000/Api/Habitacion", habitacion);

        var estado = await guardado.Content.ReadFromJsonAsync<bool>();

        if (estado)
        {
            toast.ShowSuccess("Guardado correctamente");
            Nuevo();
        }
        else
            toast.ShowError("Guardado incorrecto");

    }

    private void AsignarCaracteristicas()
    {
        bool algunSeleccionado = false;

        habitacion.CaracteristicasSelecciones = string.Empty;
        habitacion.Caracteriscas = string.Empty;

        for (int i = 0; i < 5; i++)
        {
            if (i == 0)
                habitacion.CaracteristicasSelecciones = habitacion.CaracteristicasSelecciones + Elecciones[i].ToString();
            else
                habitacion.CaracteristicasSelecciones = habitacion.CaracteristicasSelecciones + "," + Elecciones[i].ToString();

            if (Elecciones[i] == true)
            {
                if (algunSeleccionado == false)
                {
                    habitacion.Caracteriscas = habitacion.Caracteriscas + Caracteristicas[i];
                    algunSeleccionado = true;
                }
                else
                    habitacion.Caracteriscas = habitacion.Caracteriscas + ", " + Caracteristicas[i];

            }
        }
    }

    private async Task Eliminar()
    {
        var respuesta = await Http.PostAsJsonAsync($"http://localhost:5000/Api/Habitacion/{habitacion.HabitacionId}", habitacion.HabitacionId);

        var estado = await respuesta.Content.ReadFromJsonAsync<bool>();

        if (estado)
        {
            toast.ShowSuccess("Eliminado correctamente");
            Nuevo();
        }
        else
            toast.ShowError("No fue posible eliminar");
    }

    private async Task Buscar()
    {
        var respuesta = await Http.GetFromJsonAsync<Habitacion>($"http://localhost:5000/Api/Habitacion/{habitacion.HabitacionId}");

        if (respuesta.HabitacionId == 0)
        {
            Nuevo();
            toast.ShowWarning("Habitación no encontrada");
        }
        else
        {
            habitacion = respuesta;
            AsigarCheckBox();
        }

    }

    private void AsigarCheckBox()
    {
        string[] subCadena = habitacion.CaracteristicasSelecciones.Split(',');
        int i = 0;

        foreach (var cadena in subCadena)
        {
            Elecciones[i] = Convert.ToBoolean(cadena);
            i++;
        }
    }
}
